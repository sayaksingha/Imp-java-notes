Clone () method:

1. The process of creating exactly duplicate object is called cloning. 
2. The main objective of cloning is to maintain backup purposes.(i.e., if something goes wrong we    can    recover the situation by using backup copy.) 
3. We can perform cloning by using clone() method of Object class.

Signature 
    protected native object clone() throws CloneNotSupportedException;

eg#1.
public class Test implements Cloneable{
	int i=10;
	int j=20;
	public static void main(String[] args)throws CloneNotSupportedException{
		Test t1=new Test();
		Test t2=(Test)t1.clone();
		t2.i=100;
		t2.j=200;
		System.out.println("Acutal object => "+t1.i+" "+t1.j);
		System.out.println("Cloned object => "+t2.i+" "+t2.j);
   }
}
Output
Acutal object => 10 20
Cloned object => 100 200

KeyPoints about Cloneable interface
===================================
=> We can perform cloning only for Cloneable objects.
=> An object is said to be Cloneable if and only if the corresponding class implements Cloneable         interface.
=> Cloneable interface present in java.lang package and does not contain any methods. 
   It is a marker interface where the required ability will be provided automatically by the JVM.
=> If we are trying to perform cloning or non-clonable objects then we will get RuntimeException         saying CloneNotSupportedException.

Shallow cloning vs Deep cloning :
===============================
Shallow cloning:
1. The process of creating bitwise copy of an object is called Shallow Cloning .
2. If the main object contain any primitive variables then exactly duplicate copies 
   will be created in cloned object.
3. If the main object contain any reference variable then the corresponding object won't be             created just reference variable will be created by pointing to old contained object.
4. By using main object reference if we perform any change to the contained object then those            changes will be reflected automatically to the cloned object , by default Object class clone( )meant 
   for Shallow Cloning.

eg#1.
class Cat
{
	int i;
	Cat(int i){
		this.i=i;
	}
}
class Dog implements Cloneable
{
	Cat cat;
	int j;

	Dog(Cat cat,int j){
		this.cat=cat;
		this.j=j;
	}
	public Object clone()throws CloneNotSupportedException{
		return super.clone();
	}
}

public class Test{
	public static void main(String[] args)throws CloneNotSupportedException{
		Cat cat=new Cat(10);
		Dog d1=new Dog(cat,20);
		System.out.println("Acutal object => "+d1.cat.i+" "+d1.j);

		System.out.println("Perfoming cloning");
		Dog d2=(Dog)d1.clone();
		d2.cat.i=100;
		d2.j=200;

		System.out.println("Acutal object after cloning => "+d1.cat.i+" "+d1.j);
		System.out.println("Cloned object data          => "+d2.cat.i+" "+d2.j);
   }
}
Output
Acutal object => 10 20
Perfoming cloning
Acutal object after cloning => 100 20
Cloned object data          => 100 200

Note:
=> Shallow cloning is the best choice , if the Object contains only primitive values.
=> In Shallow cloning by using main object reference , if we perform any change to the contained         object then those changes will be reflected automatically in cloned copy.
=> To overcome this problem we should go for Deep cloning

Deep Cloning :
1. The process of creating exactly independent duplicate object(including contained objects also)     is    called deep cloning. 
2. In Deep cloning , if main object contain any reference variable then the corresponding Object         copy will also be created in cloned object.
3. Object class clone( ) method meant for Shallow Cloning , if we want Deep cloning then the          programmer is responsible to implement by overriding clone( ) method.

eg#1.
class Cat
{
	int i;
	Cat(int i){
		this.i=i;
	}
}
class Dog implements Cloneable
{
	Cat cat;
	int j;

	Dog(Cat cat,int j){
		this.cat=cat;
		this.j=j;
	}
	public Object clone()throws CloneNotSupportedException{
		
		Cat c1= new Cat(cat.i);
		Dog d1=new Dog(c1,j);
		return d1;

	}
}
public class Test{
	public static void main(String[] args)throws CloneNotSupportedException{
		Cat cat=new Cat(10);
		Dog d1=new Dog(cat,20);
		System.out.println("Acutal object => "+d1.cat.i+" "+d1.j);

		System.out.println("Perfoming cloning");
		Dog d2=(Dog)d1.clone();
		d2.cat.i=100;
		d2.j=200;
		System.out.println("Acutal object after cloning => "+d1.cat.i+" "+d1.j);
		System.out.println("Cloned object data          => "+d2.cat.i+" "+d2.j);
   }
}
Output
Acutal object => 10 20
Perfoming cloning
Acutal object after cloning => 10 20
Cloned object data          => 100 200


Note:
In Deep cloning by using main Object reference if we perform any change to the contained Object those changes won't be reflected to the cloned object.

Example:
Test t1=new Test();
Test t2=(Test)t1.clone();
System.out.println(t1==t2); //false
System.out.println(t1.hashCode()==t2.hashCode()); //false

Which cloning is best ?
If the Object contain only primitive variable then Shallow Cloning is the best choice ,
If the Object contain reference variables then Deep cloning is the best choice. 

Note:
 Cloning by default deep cloning.


Note: 
Different ways of Creating an Object
 1. using new Operator
	Test t=new Test();
 2. using newInstance()
	Class.forName("com.abc.main.Test").newInstance()
 3. using clone()
	Test t2=(Test)t1.clone();
 4. using factorymethods
	Runtime r=Runtime.getRuntime();
	DateFormat df=DataFormat.getInstance();
 5. using Serialization and DeSerialization
	FileInputStream fis=new FileInputStream("abc.ser");
	ObjectInputStream ois=new ObjectInputStream(fis);
	Test t=(Test)ois.readObject();













