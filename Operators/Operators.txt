Number
  a. byte,short,int,long => we can't represent POSITIVE_INFINITY,NEGATIVE_INFINITY,NaN
  b. float double => we can represent POSITIVE_INFINITY,NEGATIVE_INFINITY,NaN.

eg:: System.out.println(10/0);   => ArithmeticException
     System.out.println(0/0);    => ArithmeticException
     System.out.println(0%0);    => ArithmeticException

     System.out.println(10/0.0); => infinity
     System.out.println(-10/0.0);=>-infinity
     
     System.out.println(0.0/0.0);=> NaN
     System.out.println(-0.0/0.0);=>NaN

ArithmeticExcpetion => It is not a compile time error,it is a RunTimeException
                       It occurs only in integral arithmetic not in floating point
                       arithmetic.
                       The only operator which causes this exception is "%,/".

RelationalOperator
==================
It can be applied on every type except boolean type
  System.out.println(10>10.5);//false
  System.out.println('a'>95.5);//false
  System.out.println('z'>'a');//true
  System.out.println(true>true);//CE:incompatible types

We can't apply relational operator on String objects
  System.out.println("sachin">"dhoni");

Nesting of relational operators in not permitted
  System.out.println(10<20<30); //CE:< can't be applied on boolean and int.

For any 'x' value including NaN, the following expression return false
  System.out.println(10<Float.NaN); //false
  System.out.println(10<=Float.NaN); //false
  System.out.println(10>Float.NaN); //false
  System.out.println(10>=Float.NaN); //false
  System.out.println(Float.Nan==Float.NaN); //false

Note::
  System.out.println(Float.Nan!=Float.NaN); //true
  System.out.println(10!=Float.NaN); //false

EqualityOperator(==,!=)
=======================
  We can apply equality operator for every primitive type including boolean type
a. System.out.println(10==20); //false
b. System.out.println('a'=='b');//false
c. System.out.println('a'=97.0);//false
d. System.out.println(true==true);//true
e. System.out.println(false==false); //true

EqualityOperator on Objects
===========================
We can apply equality operator for objects types also
For object reference r1 and r2,
   if  r1==r2, both r1 and r2 are pointing to same object returns true
   else returns false
== :: It compares the reference of the object or address of the object.

eg:: Thread t1=new Thread();
     Thread t2=new Thread();
     Thread t3=t1;
     System.out.println(t1==t2);//false
     System.out.println(t1==t3);//true

Rule:: To use equality operator between object types compulsorily there should be some
       relation b/w argument types, otherwise we get compile time error.

eg#1.
  Thread t=new Thread();
  Object o=new Object();
  String s=new String("abc");
  System.out.println(t==o);//false
  System.out.println(o==s);//false
  System.out.println(t==s);//CE:incompatible types

instanceof
==========
 This operator is used to check whether reference is of particular type or not.
 if it is of same type/parent type then it returns true, otherwise it returns false.

	Syntax:: r instanceof X
               r=> reference
               X=> class/Interface
       Note:: relation from r to X should compulsorily exists otherwise CompileTimeError.

eg:: Thread t= new Thread();
     System.out.println( t instanceof Thread);//true
     System.out.println( t instanceof Object);//true
     System.out.println( t instanceof Runnable);//true
     System.out.println( t instanceof String); //compiletime error

eg:: String s=new String("sachin");
     System.out.println(s instanceof String);//true
     System.out.println(s instanceof Object);//true
     System.out.println(s instanceof Thread);//compile time error

eg:: Whenever we are checking parent object is of child type or not it would result in false
     1. Object obj= new Object();
        System.out.println(obj instanceof String);//false

     2. Object obj=new String();
        System.out.println(obj instanceof String);//true
  
Note: for any class/interface X null instanceof X is always false
     3. System.out.println(null instanceof Runnable); //false

Ternary operator
================


Evaluation of Java Operands
===========================
There is no precedence of java operands before applying any operators all operands will be evaluated from Left to Right.

public class TestApp{
	public static void main(String... args){
		System.out.println(m1(1) + m1(2) *m1(3)/m1(4) *m1(5) +m1(6));
	}
	public int m1(int i){
		System.out.println(i);
		return i;
	}
}

Note::
1+2*3/4*5+6
1+6/4*5+6
1+1*5+6
1+5+6
6+6
12




















     

  
       
   


  


  




